import os
import shutil
import time
import re
import winreg
from pathlib import Path
from datetime import datetime
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

def get_download_folder():
    try:
        with winreg.OpenKey(
            winreg.HKEY_CURRENT_USER,
            r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders"
        ) as key:
            return winreg.QueryValueEx(key, '{374DE290-123F-4565-9164-39C4925E467B}')[0]
    except Exception:
        return str(Path.home() / "Downloads")

FILE_TYPES = {
    "–î–æ–∫—É–º–µ–Ω—Ç—ã": {".pdf", ".doc", ".docx", ".txt", ".rtf", ".odt", ".xls", ".xlsx", ".csv", ".ods",
                  ".ppt", ".pptx", ".odp", ".xml", ".p7s", ".xml.p7s", ".xps"},
    "–ö–∞—Ä—Ç–∏–Ω–∫–∏": {".jpg", ".jpeg", ".png", ".gif", ".bmp", ".svg", ".webp", ".tiff", ".heic"},
    "–í–∏–¥–µ–æ": {".mp4", ".mov", ".avi", ".mkv", ".webm", ".wmv", ".flv", ".mts", ".3gp"},
    "–ú—É–∑—ã–∫–∞": {".mp3", ".wav", ".ogg", ".flac", ".aac", ".m4a"},
    "–ê—Ä—Ö–∏–≤—ã": {".zip", ".rar", ".7z", ".tar", ".gz", ".bz2", ".xz", ".iso"},
    "–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–µ": {".exe", ".msi", ".bat", ".cmd", ".ps1"},
    "–®—Ä–∏—Ñ—Ç—ã": {".ttf", ".otf", ".woff", ".woff2"},
    "–≠–¶–ü/–ø–æ–¥–ø–∏—Å–∏": {".sig", ".p7m", ".cer", ".pem", ".der", ".crt", ".key"},
}

MONTHS = {
    1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å", 5: "–ú–∞–π", 6: "–ò—é–Ω—å",
    7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç", 9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
}

KEYWORD_FOLDERS = {
    "–æ—Ç—á–µ—Ç": "–û—Ç—á—ë—Ç—ã", "–∏—Ç–æ–≥": "–û—Ç—á—ë—Ç—ã", "—Ä–µ–∑—É–ª—å—Ç–∞—Ç": "–û—Ç—á—ë—Ç—ã", "report": "–û—Ç—á—ë—Ç—ã", "–±–∞–ª–∞–Ω—Å": "–û—Ç—á—ë—Ç—ã", "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞": "–û—Ç—á—ë—Ç—ã",
    "—Å—á–µ—Ç": "–°—á–µ—Ç–∞", "invoice": "–°—á–µ—Ç–∞", "–æ–ø–ª–∞—Ç–∞": "–°—á–µ—Ç–∞", "–ø–ª–∞—Ç–µ–∂": "–°—á–µ—Ç–∞",
    "–Ω–∞–∫–ª–∞–¥–Ω–∞—è": "–ù–∞–∫–ª–∞–¥–Ω—ã–µ", "–Ω–∞–∫–ª": "–ù–∞–∫–ª–∞–¥–Ω—ã–µ", "waybill": "–ù–∞–∫–ª–∞–¥–Ω—ã–µ", "—Ç–æ–≤–∞—Ä": "–ù–∞–∫–ª–∞–¥–Ω—ã–µ",
    "–¥–æ–≥–æ–≤–æ—Ä": "–î–æ–≥–æ–≤–æ—Ä—ã", "contract": "–î–æ–≥–æ–≤–æ—Ä—ã", "–æ—Ñ–µ—Ä—Ç–∞": "–î–æ–≥–æ–≤–æ—Ä—ã",
    "–∞–∫—Ç": "–ê–∫—Ç—ã", "acceptance": "–ê–∫—Ç—ã",
    "—Ñ–æ—Ç–æ": "–§–æ—Ç–æ", "photo": "–§–æ—Ç–æ", "img": "–§–æ—Ç–æ", "image": "–§–æ—Ç–æ", "—Å–∫–∞–Ω": "–§–æ—Ç–æ", "scan": "–§–æ—Ç–æ", "—Å–∫—Ä–∏–Ω": "–§–æ—Ç–æ", "screenshot": "–§–æ—Ç–æ",
    "–ø—Ä–æ—Ç–æ–∫–æ–ª": "–ü—Ä–æ—Ç–æ–∫–æ–ª—ã", "minutes": "–ü—Ä–æ—Ç–æ–∫–æ–ª—ã", "—Å–æ–≤–µ—â–∞–Ω–∏–µ": "–ü—Ä–æ—Ç–æ–∫–æ–ª—ã",
    "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è": "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏", "presentation": "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏", "slides": "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏",
    "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": "–°–ø—Ä–∞–≤–∫–∏", "manual": "–°–ø—Ä–∞–≤–∫–∏", "—Å–ø—Ä–∞–≤–∫–∞": "–°–ø—Ä–∞–≤–∫–∏", "—Ä–µ–≥–ª–∞–º–µ–Ω—Ç": "–°–ø—Ä–∞–≤–∫–∏",
    "–ø—Ä–æ–µ–∫—Ç": "–ü—Ä–æ–µ–∫—Ç—ã", "task": "–ü—Ä–æ–µ–∫—Ç—ã", "–ø–ª–∞–Ω": "–ü–ª–∞–Ω—ã", "roadmap": "–ü–ª–∞–Ω—ã",
    "—Ç–∑": "–¢–µ—Ö–¥–æ–∫", "—Ç–µ—Ö–∑–∞–¥–∞–Ω–∏–µ": "–¢–µ—Ö–¥–æ–∫", "—Å–º–µ—Ç–∞": "–¢–µ—Ö–¥–æ–∫", "—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è": "–¢–µ—Ö–¥–æ–∫", "—Ç–µ—Ö–¥–æ–∫": "–¢–µ—Ö–¥–æ–∫", "—á–µ—Ä—Ç–µ–∂": "–¢–µ—Ö–¥–æ–∫", "–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ": "–¢–µ—Ö–¥–æ–∫",
    "–ø–æ–¥–ø–∏—Å—å": "–ü–æ–¥–ø–∏—Å–∏", "signature": "–ü–æ–¥–ø–∏—Å–∏", "ecp": "–ü–æ–¥–ø–∏—Å–∏", "—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç": "–ü–æ–¥–ø–∏—Å–∏", "key": "–ü–æ–¥–ø–∏—Å–∏",
    "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ": "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ", "quotation": "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ", "offer": "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ", "–∫–ø": "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ",
    "–ø–∞—Å–ø–æ—Ä—Ç": "–õ–∏—á–Ω–æ–µ", "–∞–Ω–∫–µ—Ç–∞": "–õ–∏—á–Ω–æ–µ", "cv": "–õ–∏—á–Ω–æ–µ", "resume": "–õ–∏—á–Ω–æ–µ", "–¥–∏–ø–ª–æ–º": "–õ–∏—á–Ω–æ–µ",
    "log": "–õ–æ–≥–∏", "debug": "–õ–æ–≥–∏", "trace": "–õ–æ–≥–∏", "–æ—à–∏–±–∫–∞": "–õ–æ–≥–∏", "crash": "–õ–æ–≥–∏"
}

JUNK_EXTS = {".tmp", ".part", ".crdownload", ".ds_store"}
JUNK_PREFIXES = ("~$", ".~lock")

SOURCE = Path(get_download_folder())
LOG_DIR = SOURCE / "–õ–æ–≥–∏"
LOG_DIR.mkdir(parents=True, exist_ok=True)
LOG_FILE = LOG_DIR / "ninja_log.txt"

def log(msg: str):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with LOG_FILE.open("a", encoding="utf-8") as f:
        f.write(f"[{timestamp}] {msg}\n")

def get_ext(filename: str) -> str:
    base, ext = os.path.splitext(filename.lower())
    return ".xml.p7s" if ext == ".p7s" and base.endswith(".xml") else ext

def get_category(ext: str) -> str:
    for cat, exts in FILE_TYPES.items():
        if ext in exts:
            return cat
    return "–ü—Ä–æ—á–µ–µ"

def get_folder_by_date(path: Path) -> str:
    dt = datetime.fromtimestamp(path.stat().st_ctime)
    return f"{dt.year}/{dt.month:02d}.{MONTHS[dt.month]}"

def get_keyword_folder(name: str) -> str | None:
    name_lower = name.lower()
    for key, folder in KEYWORD_FOLDERS.items():
        if key in name_lower:
            return folder
    return None

def should_ignore(name: str) -> bool:
    name_lower = name.lower()
    return name_lower.endswith(tuple(JUNK_EXTS)) or name_lower.startswith(JUNK_PREFIXES)

def move_file(path: Path):
    if not path.is_file():
        return
    name = path.name
    if should_ignore(name):
        return

    ext = get_ext(name)
    category = get_category(ext)
    date_folder = get_folder_by_date(path)
    keyword_folder = get_keyword_folder(name)

    target_parts = [SOURCE, category]
    if keyword_folder:
        target_parts.append(keyword_folder)
    target_parts.append(date_folder)
    target_dir = Path(*target_parts)
    target_dir.mkdir(parents=True, exist_ok=True)

    dst = target_dir / name
    i = 1
    while dst.exists():
        stem, ext_ = os.path.splitext(name)
        dst = target_dir / f"{stem} ({i}){ext_}"
        i += 1

    try:
        shutil.move(str(path), str(dst))
        log(f"–ü–µ—Ä–µ–º–µ—â—ë–Ω: {name} ‚Üí {dst}")
        print(f"[‚úî] {name} ‚Üí {category}/{date_folder}")
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è {name}: {e}")

def sort_existing():
    for entry in SOURCE.iterdir():
        if entry.is_file():
            move_file(entry)

def setup_autostart():
    try:
        pythonw = shutil.which("pythonw")
        if not pythonw:
            log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω pythonw.exe, –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return
        startup_path = Path(os.getenv("APPDATA")) / \
            "Microsoft" / "Windows" / "Start Menu" / "Programs" / "Startup"
        startup_path.mkdir(parents=True, exist_ok=True)
        bat_path = startup_path / "start_fileninja.bat"
        script_path = Path(__file__).resolve()
        with bat_path.open("w", encoding="utf-8") as f:
            f.write(f'@echo off\ncd /d "{script_path.parent}"\nstart "" "{pythonw}" "{script_path}"\n')
        log(f"‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {bat_path}")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: {e}")

class Handler(FileSystemEventHandler):
    def on_created(self, event):
        if event.is_directory:
            return
        time.sleep(1.5)
        move_file(Path(event.src_path))

def main():
    setup_autostart()
    log("–ó–∞–ø—É—Å–∫ FileNinja")
    print(f"ü•∑ FileNinja —Å–ª–µ–¥–∏—Ç –∑–∞: {SOURCE}")
    sort_existing()
    observer = Observer()
    observer.schedule(Handler(), str(SOURCE), recursive=False)
    observer.start()
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
        log("FileNinja –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    observer.join()

if __name__ == "__main__":
    main()
